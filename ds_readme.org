#+TITLE: Ds_readme

- ENGINE Sanity check at startup
  - correct read/write permissions on /tmp folder (or whereever DS store temp-files)
  - can we access source (samba share, etc)
    ie. some form for login check
  - IF NOT, clear error in admin module/logs

- debug tools
  - cli tool to scan a resource
    input:
    - scan_id (to get login information)
    - file/resource to scan
    output:

- admin interface (maybe cli-tool from container)
  - endpoints (all queriable by curl/wget)
    - list all scan_jobs, with id, name, etc
    - start_scan_by_id
  - scan_status
    - show statistical information (summary)
      how many matches/problems by file extension

- report
  - "log tail" for problem, matches, etc
    give me n-latest problem messages and follow



* messages

** MatchFragment
#+begin_src json
{
  'rule': {
    'type': 'links',
    'sensitivity': 0,
    'name': None
  },
  'matches': [
    {
      'match': 'http://localhost:64346/intet.html',
      'context': 'unable to follow links',
      'sensitivity': 0
    },
    {
      'match': 'http://pawsen.dk',
      'context': 'unable to follow links',
      'sensitivity': 0
    },
    {
      'match': 'http://pawsen2.dk',
      'context': 'unable to follow links',
      'sensitivity': 0
    }
  ]
}
#+end_src

* Admin
** models

En bruger kan være
- =superuser=, og har dermed adgang til alle =Feature=
  dette er indbygget django feature der kommer fra =from django.c   ontrib.auth import get_user_model=
- =administrator_for= og dermed knyttet til en =Client= (kunde). Dette er en DS feature.
  Tilknyt din bruger til en =Client= ved at vælge =tilføj administratorer= i admin-interfacet.
  Der skal være oprettet en =kunde= under =Kunder=. Husk at slå Features til for =kunden=

#+begin_src python
from os2datascanner.projects.admin.core.models.client import Client
from os2datascanner.projects.admin.core.models.administrator import Administrator
from os2datascanner.projects.admin.core.models import Feature

# See if a given Feature is enabled for a user that have administrator_for
user  = User.objects.all()[0]
client = user.administrator_for.client
user.administrator_for.client.enabled_features
feature.IMPORT_SERVICES in user.administrator_for.client.enabled_features

# get a user from a Client. There is a reverse ono-to-many(ForeignKey) relation, thus we need .first()
client = Client.objects.all()[1]
user = client.administrators.first()
#+end_src


ascii created using [[https://asciiflow.com/#/share/eJyrVspLzE1VslLyDzZyCY5PTMnNzFPSUcpJrEwtAopWxyhVxChZWZqa68QoVQJZRhYGQFZJakUJkBOjpEAlkJKVmJeer5ecn1dSlJmkl1hakqEXE5NHLeOBID21JL60OLUoPjc%2FJTWHSLOdczJT80og7GQwWw8cQpnFJUWJJflFxXpIih9N2UO8k4GKYcy0zKLiEg1NvGrJMBjIoBRN24UwNxQYduS4YnoL5Q7BZq9%2FUXpiXmZVYklmfl4xpr1QgBJb8Wn5RVhTFRWCChWBDIWkFxzWIQv7h2IV1sjMLcgvKtFE9z9FgQfhewOzWSYSH2YVkhtIs0KpVqkWAF8Il0o%3D)][asciiflow]]

#+BEGIN_SRC ditaa :file img/admin_user_relationship.png
                                                                        django.contrib.auth.
                                                                           get_user_model
                                    Client      client.administrators.           |
                                       |        first()                          |
                                       |      +--------------------->          User
                                       |      <---------------------+
                 Organizations         |        user.administrator_for.
                 +---------------------+----    client
                 |
         OU      |
         (import)|
          +------+--------
          |
Konti     |
(import)  |
   -------+-------
#+END_SRC

