#+TITLE: Readme


* LoRa


** get all search parameters for endpoint

tip. Jeg skal lave en søgning i LoRa, fx. finde alle adresser for en person.
Det gøres ved
```
curl -s "http://localhost:8080/organisation/organisationfunktion?funktionsnavn=FUNKTIONSNAVN&NØGLE=uuid&list=1"
```
Men hvordan finder jeg `FUNKTIONSNAVN` og `NØGLE`?

Det gør jeg ved at få alle `organisationfunktion`er i databasen og derefter ekstrahere relevant info,

```
curl -s "http://localhost:8080/organisation/organisationfunktion?funktionsnavn=%&list=1" | jq > funktionsnavne.txt

jq '[ .results[][].registreringer[].attributter.organisationfunktionegenskaber[].funktionsnavn ] | unique' funktionsnavne.txt

jq '[ .results[][].registreringer[].relationer | keys | flatten[] ] | unique' funktionsnavne.txt
```

Det giver mig
```
> jq '[ .results[][].registreringer[].relationer | keys | flatten[] ] | unique' funktionsnavne.txt
[
  "adresser",
  "opgaver",
  "organisatoriskfunktionstype",
  "primær",
  "tilknyttedebrugere",
  "tilknyttedeenheder",
  "tilknyttedeitsystemer",
  "tilknyttedeorganisationer"
]
> jq '[ .results[][].registreringer[].attributter.organisationfunktionegenskaber[].funktionsnavn ] | unique' funktionsnavne.txt
[
  "Adresse",
  "Engagement",
  "IT-system",
  "Leder",
  "Rolle",
  "Tilknytning"
]
```
og jeg ved nu at mit kald til LoRa skal være

```
> curl -s "http://localhost:8080/organisation/organisationfunktion?funktionsnavn=Adresse&tilknyttedebrugere=57561cc7-5e07-4a7b-b2bb-af5a22fa1f65&list=1"
```
for at få alle adresser tilknyttet brugeren `57561cc7-5e07-4a7b-b2bb-af5a22fa1f65`



```
        search_fields=_extract_search_params(
            query_args={
                "at": None,
                "validity": None,
                "overordnet": str(parent_uuid),
                "gyldighed": "Aktiv",

```
** get all endpoints
Jeg ser at man kan,
https://git.magenta.dk/rammearkitektur/lora/blob/master/oio_rest/oio_rest/views.py#L48
```
> curl -s "http://localhost:8080/site-map"
# nu ved jeg at man kan
> curl -s "http://localhost:8080/organisation/organisationenhed/fields" | jq
```

```
> curl -s "http://localhost:8080/organisation/organisationenhed/fields" | jq
{
  "attributter": {
    "egenskaber": [
      "brugervendtnoegle",
      "enhedsnavn",
      "integrationsdata"
    ]
  },
  "attributter_metadata": {
    "egenskaber": {
      "brugervendtnoegle": {
        "mandatory": true
      }
    }
  },
  "tilstande": {
    "gyldighed": [
      "Aktiv",
      "Inaktiv"
    ]
  },
  "relationer_nul_til_en": [
    "overordnet",
    "tilhoerer",
    "skatteenhed",
    "branche",
    "niveau",
    "produktionsenhed",
    "enhedstype"
  ],
  "relationer_nul_til_mange": [
    "tilknyttedeenheder",
    "tilknyttedepersoner",
    "tilknyttedefunktioner",
    "tilknyttedeitsystemer",
    "opgaver",
    "adresser",
    "tilknyttedeinteressefaellesskaber",
    "opmærkning",
    "ansatte",
    "tilknyttedebrugere",
    "tilknyttedeorganisationer"
  ]
}
```

* mo
** utils
hping3
postman

** test servers
https://morademoorgviewer.magenta.dk
https://moratest.magenta.dk/

** docs
https://mox.readthedocs.io
https://os2mo-data-import-and-export.readthedocs.io

** tips
tip. Jeg skal lave en søgning i LoRa, fx. finde alle adresser for en person.
Det gøres ved

curl -s "http://localhost:8080/organisation/organisationfunktion?funktionsnavn=FUNKTIONSNAVN&NØGLE=uuid&list=1"


Men hvordan finder jeg FUNKTIONSNAVN og NØGLE?

Det gør jeg ved at få alle organisationfunktioner i databasen og derefter ekstrahere relevant info,

curl -s "http://localhost:8080/organisation/organisationfunktion?funktionsnavn=%&list=1" | jq > funktionsnavne.txt
jq '[ .results[][].registreringer[].attributter.organisationfunktionegenskaber[].funktionsnavn ] | unique' funktionsnavne.txt

jq '[ .results[][].registreringer[].relationer | keys | flatten[] ] | unique' funktionsnavne.txt



Det giver mig

> jq '[ .results[][].registreringer[].relationer | keys | flatten[] ] | unique' funktionsnavne.txt
[
  "adresser",
  "opgaver",
  "organisatoriskfunktionstype",
  "primær",
  "tilknyttedebrugere",
  "tilknyttedeenheder",
  "tilknyttedeitsystemer",
  "tilknyttedeorganisationer"
]
> jq '[ .results[][].registreringer[].attributter.organisationfunktionegenskaber[].funktionsnavn ] | unique' funktionsnavne.txt
[
  "Adresse",
  "Engagement",
  "IT-system",
  "Leder",
  "Rolle",
  "Tilknytning"
]


og jeg ved nu at mit kald til LoRa skal være

> curl -s "http://localhost:8080/organisation/organisationfunktion?funktionsnavn=Adresse&tilknyttedebrugere=57561cc7-5e07-4a7b-b2bb-af5a22fa1f65&list=1"


for at få alle adresser tilknyttet brugeren 57561cc7-5e07-4a7b-b2bb-af5a22fa1f65

* debug på server
Det har jeg lige brugt ifm. debugging af datascanner på en server.

Det er dog nødvendigt at tilføje

    stdin_open: true
    tty: true


til docker-compose.yml. Dernæst

docker-compose up -d
docker-compose exec -u root <explorer> bash
apt install neovim
pip install pdbpp
# set breakpoint()
^d
docker-compose restart <explorer>
docker attach <explorer_id>
# brug pdb++ og skriv
sticky
# detach docker containeren uden at stoppe den
^p ^q

* ipv6

: extraOptions = "--ipv6 --fixed-cidr-v6 2001:db8:1::/64";

To enable IPv6 internet access from containers, enable NAT for the private Docker subnet on the host:
: ip6tables -t nat -A POSTROUTING -s 2001:db8:1::/64 ! -o docker0 -j MASQUERADE
(and find a way to make it persistent)

Test it with
#+begin_src sh
dkc run --rm 0u root mo bash
apt update
apt install nmap inetutils-ping dnsutils

ping -6 google,com
#+end_src


#+begin_src yaml
version: "3.9"
services:
  frontend:
    depends_on:
      mo:
        condition: service_started
    networks:
      - ipv6
  mo:
    depends_on:
      mox:
        condition: service_started
      msg_broker:
        condition: service_started
      keycloak:
        condition: service_started
      otel-collector:
        condition: service_started
    environment:
      os2mo_auth: "false"
    user: root
    networks:
      - ipv6
  mox:
    depends_on:
      mox-db-init:
        condition: service_completed_successfully
      mox-db:
        condition: service_started
      otel-collector:
        condition: service_started
    ports:
      - "5432:5432"
    networks:
      - ipv6
  mox-db-init:
    depends_on:
      mox-db:
        condition: service_started
    networks:
      - ipv6
  keycloak:
    depends_on:
      keycloak-gen:
        condition: service_completed_successfully
      keycloak-db:
        condition: service_started
    networks:
      - ipv6
  otel-collector:
    depends_on:
      tempo:
        condition: service_started
  grafana:
    depends_on:
      tempo:
        condition: service_started
    networks:
      - ipv6
  msg_broker:
    networks:
      - ipv6
  keycloak-db:
    networks:
      - ipv6
  mox-db:
    networks:
      - ipv6
  tempo:
    networks:
      - ipv6
  fixture-loader:
    networks:
      - ipv6


networks:
  ipv6:
    enable_ipv6: true
    ipam:
      config:
        - subnet: "fd12:3456:789a:1::/64"
#+end_src
